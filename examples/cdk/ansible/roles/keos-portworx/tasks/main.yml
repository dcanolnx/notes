---
# tasks file
- name: Confirm we are working with correct cluster
  shell: "kubectl --kubeconfig {{ keos_kubeconfig_path }} config current-context | cut -d \"@\" -f2"
  register: currentcluster
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"
  failed_when: "cluster not in currentcluster.stdout"

- name: Fail if not AlmaLinux
  fail:
    msg: "This role should only be run on AlmaLinux 8.7 {{ansible_distribution }} {{ansible_distribution_version}}"
  when: ansible_distribution != "AlmaLinux" or ansible_distribution_version != "8.7"

## CHECK IF ISCSID AND MULTIPATHD ARE RUNNING
- name: Make sure iscsid is running
  systemd:
    state: started
    name: iscsid

- name: Make sure multipathd is running
  systemd:
    state: started
    name: multipathd

- name: Create px-pure-secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ keos_kubeconfig_path }}"
    definition: "{{ lookup('template', '{{role_path}}/templates/px-pure-secret.yaml') | from_yaml }}"
    namespace: kube-system
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Get configmap coredns
  shell: kubectl --kubeconfig {{ keos_kubeconfig_path }} get configmap coredns -n kube-system -o yaml > /tmp/corednsconfigmap.yaml
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Check if section hosts exists - corednsconfigmap.yaml
  lineinfile:
    state: absent
    path: "/tmp/corednsconfigmap.yaml"
    regexp: '        hosts {$'
  check_mode: true
  register: check
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Add section hosts - corednsconfigmap.yaml
  lineinfile:
    path: /tmp/corednsconfigmap.yaml
    insertafter: 'loop$'
    line: "        hosts {"
  delegate_to: localhost
  when:
    - "ansible_hostname | regex_search('kubew3')"
    - not check.changed

- name: Populate section hosts - corednsconfigmap.yaml
  lineinfile:
    path: /tmp/corednsconfigmap.yaml
    insertafter: 'hosts {$'
    line: "        fallthrough"
  delegate_to: localhost
  when:
    - "ansible_hostname | regex_search('kubew3')"
    - not check.changed

- name: Populate section hosts - corednsconfigmap.yaml
  lineinfile:
    path: /tmp/corednsconfigmap.yaml
    insertafter: 'fallthrough$'
    line: '        } # end of hosts'
  delegate_to: localhost
  when:
    - "ansible_hostname | regex_search('kubew3')"
    - not check.changed

- name: Get workers of keos cluster
  shell: kubectl --kubeconfig {{ keos_kubeconfig_path }} get nodes -o wide | grep worker | awk '{print "          "$6,$1}'
  register: nodes
  delegate_to: localhost
  when:
    - "ansible_hostname | regex_search('kubew3')"
    - not check.changed

- name: Populate section hosts - corednsconfigmap.yaml
  lineinfile:
    state: present
    path: /tmp/corednsconfigmap.yaml
    insertafter: 'hosts {$'
    line: "{{ nodes.stdout }}"
  delegate_to: localhost
  when:
    - "ansible_hostname | regex_search('kubew3')"
    - not check.changed

- name: Apply modified corednsconfigmap.yaml
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ keos_kubeconfig_path }}"
    src: "/tmp/corednsconfigmap.yaml"
    namespace: kube-system
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Delete coredns pods to apply changes
  shell: "kubectl --kubeconfig {{ keos_kubeconfig_path }} delete pods -l k8s-app=kube-dns -n kube-system"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Wait Coredns become ready
  shell: "kubectl --kubeconfig {{ keos_kubeconfig_path }} get deployment coredns -n kube-system --output=jsonpath='{.status.availableReplicas}'"
  register: prometheusoperator_replicas
  until: prometheusoperator_replicas.stdout != "0"
  retries: 20
  delay: 5
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Deploy portworx network policy
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ keos_kubeconfig_path }}"
    src: "{{role_path}}/files/portworx-networkpolicy.yaml"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Deploy Portworx Operator deployment
  shell: "kubectl --kubeconfig {{ keos_kubeconfig_path }} apply -f 'https://install.portworx.com/2.13?comp=pxoperator&kbver=1.24.4'"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Pause for 1 minute
  ansible.builtin.pause:
    minutes: 1
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Deploy Portworx
  shell: "kubectl --kubeconfig {{ keos_kubeconfig_path }} apply -f 'https://install.portworx.com/2.13?operator=true&mc=false&kbver={{kubernetes_version}}&oem=esse&user={{portworx_user}}&b=true&kd=size%3D32&s=%22size%3D150%22&pureSanType=ISCSI&c={{portworx_cluster}}&stork=true&csi=true&mon=true&tel=true&st=k8s&promop=true'"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Deploy portworx storageclass
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ keos_kubeconfig_path }}"
    src: "{{role_path}}/files/portworx-sc.yaml"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Deploy portworx nfs
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ keos_kubeconfig_path }}"
    src: "{{role_path}}/files/portworx-sc-nfs.yaml"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Deploy portworx directaccess
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ keos_kubeconfig_path }}"
    src: "{{role_path}}/files/portworx-sc-direct-access.yaml"
  delegate_to: localhost
  when: "ansible_hostname | regex_search('kubew3')"

- name: Check {{ item }} Storage Class
  include_role:
    name: "{{role_path}}/../utils"
    tasks_from: check-storage-class.yml
    apply:
      delegate_to: localhost
  vars:
    storage_class_name: "{{ item }}"
    storage_class_namespace: "kube-system"
  loop:
    - sc-portworx-fa-direct-access
    - px-sharedv4-sc
  when: "ansible_hostname | regex_search('kubew3')"


