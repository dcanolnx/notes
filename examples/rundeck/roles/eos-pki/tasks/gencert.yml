- name: Create pki certs folder
  file:
    path: "{{ pki_gencert_path }}/{{ cn }}"
    state: directory

- name: Create key
  openssl_privatekey:
    path: "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.key"

- name: Create csr
  openssl_csr:
    path: "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.csr"
    privatekey_path: "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.key"
    common_name: "{{ cn }}"
    subject_alt_name: "DNS:{{ cn }}{% if sans is defined %},{{ sans }}{% endif %}"
    key_usage_critical: "yes"
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage: "{{ extended_key_usage | default(extended_key_usage_default) }}"

- name: Create certificate
  openssl_certificate:
    path: "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.crt"
    ownca_privatekey_path: "{{ pki_ca_root_key_path }}"
    ownca_privatekey_passphrase: "{{ pki_password }}"
    ownca_path: "{{ pki_path }}/{{ pki_ca_root_name }}"
    ownca_not_after: +1825d
    csr_path: "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.csr"
    provider: ownca

- name: Generate bundle
  shell:
    cmd: cat "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.crt" "{{ pki_path }}/{{ pki_ca_root_name }}" > "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}-chain.pem"

# ansible-galaxy collection install community.general
- name: Generate Keystore
  community.general.java_keystore:
    name: "{{ cn }}"
    private_key_passphrase: "{{ pki_password }}"
    private_key: "{{ lookup('file',pki_gencert_path + '/' + cn + '/' + cn + '.key') }}"
    certificate: "{{ lookup('file', pki_gencert_path + '/' + cn + '/' + cn + '.crt') }}"
    password: "{{ stores_password }}"
    dest: "{{ pki_gencert_path }}/{{ cn }}/{{ keystore_file }}"
  throttle: 1

- name: Generate truststore
  community.general.java_cert:
    cert_path: "{{ pki_ca_root_path }}"
    keystore_path: "{{ pki_gencert_path }}/{{ truststore_file }}"
    keystore_pass: "{{ stores_password }}"
    keystore_create: yes
    cert_alias: "hdfs pki"
    state: present
    trust_cacert: True

- name: Fetch secrets
  slurp:
    src: "{{ item }}"
  no_log: yes
  with_items:
    - "{{ pki_path }}/{{ pki_ca_root_name }}"
    - "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.key"
    - "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}.crt"
    - "{{ pki_gencert_path }}/{{ cn }}/{{ cn }}-chain.pem"
    - "{{ pki_gencert_path }}/{{ cn }}/{{ keystore_file }}"
    - "{{ pki_gencert_path }}/{{ truststore_file }}"
  register: slurp

- name: Return gencert_result
  set_fact:
    gencert_result:
      ca: "{{ slurp.results[0].content | b64decode }}"
      key: "{{ slurp.results[1].content | b64decode }}"
      cert: "{{ slurp.results[2].content | b64decode }}"
      cert_chain: "{{ slurp.results[3].content | b64decode }}"
      keystore: "{{ slurp.results[4].content | b64decode }}"
      truststore: "{{ slurp.results[5].content | b64decode }}"
  no_log: yes