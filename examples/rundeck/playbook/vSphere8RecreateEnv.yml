---
- hosts: localhost
  vars:
    vcenter_hostname: "vcenter.int.stratio.com"
    vcenter_username: "administrator@vsphere.local"
    vcenter_password: 
    datacenter:       "Stratio.com"
    cluster:          "ClusterA"
    parent_folder:    "Pool"
    env_name:         
    kerberos:         false
    hdfs:             false
    master:            
    master_CPUs:      4
    master_RAM:       16
    nodes:            
    nodes_CPUs:       10
    nodes_RAM:        32
    OS:               CentOS8        
    pause_seconds:    30
    template:         "centos8stream"
    vm_user:          "root"
    vm_password:      "stratio"
    vm_dns:           "10.120.0.42"
    storage:          "local-path"

  tasks:
    - name: Check if /tmp/{{env_name}}_info.yaml exists
      stat:
        path: /tmp/{{env_name}}_info.yaml
      register: file_stat
      ignore_errors: yes

    - name: Fail if the file does not exist
      fail:
        msg: "File /tmp/{{env_name}}_info.yaml does not exists"
      when: not file_stat.stat.exists

    - name: Create {{ env_name }} folder 
      vcenter_folder:
        hostname:        "{{ vcenter_hostname }}"
        username:        "{{ vcenter_username }}"
        password:        "{{ vcenter_password }}"
        datacenter_name: "{{ datacenter }}"
        validate_certs: no
        parent_folder:   "{{ parent_folder }}"
        folder_name:     "{{ env_name }}"
        folder_type:     vm
        state:           present
      delegate_to: localhost


    - name: Read YAML file
      set_fact:
        yaml_content: "{{ lookup('file', '/tmp/{{env_name}}_info.yaml') | from_yaml }}"

### KERBEROS
    - name: Create kerberos machine if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        esxi_hostname:  "{{ item.esxi_hostname }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ env_name }}-kerberos"
        state:          present
        template:       template-ldapkerberos
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
      delegate_to:      localhost
      when: "'-kerberos' in item.guest_name and kerberos == true"
      loop: "{{ yaml_content.virtual_machines }}"
    
    - name: Config Kerberos Network if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        cluster:        "{{ cluster }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ env_name }}-kerberos"
        state:          present
        template:       template-ldapkerberos
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
      delegate_to:      localhost
      when: "'-kerberos' in item.guest_name and kerberos == true"
      loop: "{{ yaml_content.virtual_machines }}"
### HDFS
    - name: Create HDFS from template if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        esxi_hostname:  "{{ item.esxi_hostname }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ env_name }}-hdfs"
        state:          present
        template:       "template-{{template}}-hdfs"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
      delegate_to:      localhost
      when: "'-hdfs' in item.guest_name  and hdfs == true"
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Config HDFS Network  if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        cluster:        "{{ cluster }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ env_name }}-hdfs"
        state:          present
        template:       "template-{{template}}-hdfs"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
      delegate_to:      localhost
      when: "'-hdfs' in item.guest_name and hdfs == true"
      loop: "{{ yaml_content.virtual_machines }}"


#### MASTERS
    - name: Create Masters from template if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        esxi_hostname:  "{{ item.esxi_hostname }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ item.guest_name }}"
        state:          present
        template:       "template-{{template}}-master_k8s"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
          connected: yes
        hardware:
          memory_mb:    "{{ item.allocated.memory }}"
          num_cpus:     "{{ item.allocated.cpu }}"
      delegate_to:      localhost
      when: "'-master' in item.guest_name "
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Config Masters Network if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        cluster:        "{{ cluster }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ item.guest_name }}"
        state:          present
        template:       "template-{{template}}-master_k8s"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
          connected: yes
      delegate_to:      localhost
      when: "'-master' in item.guest_name "
      loop: "{{ yaml_content.virtual_machines }}"

#### NODES
    - name: Create Node from template if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        esxi_hostname:  "{{ item.esxi_hostname }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ item.guest_name }}"
        state:          present
        template:       "template-{{template}}-node_k8s_cephstorage"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
          connected: yes
        hardware:
          memory_mb:    "{{ item.allocated.memory }}"
          num_cpus:     "{{ item.allocated.cpu }}"
      delegate_to:      localhost
      when: "('-node' in item.guest_name) and ('ceph' in storage)"
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Create Node from template if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        esxi_hostname:  "{{ item.esxi_hostname }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ item.guest_name }}"
        state:          present
        template:       "template-{{template}}-node_k8s_localstorage"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
          connected: yes
        hardware:
          memory_mb:    "{{ item.allocated.memory }}"
          num_cpus:     "{{ item.allocated.cpu }}"
      delegate_to:      localhost
      when: 
       - "'-node' in item.guest_name"
       - storage == "local-path"
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Config Node Network if exists in YAML file
      vmware_guest:
        hostname:       "{{ vcenter_hostname }}"
        username:       "{{ vcenter_username }}"
        password:       "{{ vcenter_password }}"
        datacenter:     "{{ datacenter }}"
        validate_certs: no
        cluster:        "{{ cluster }}"
        folder:         "/{{ parent_folder }}/{{ env_name }}"
        name:           "{{ item.guest_name }}"
        state:          present
        template:       "template-{{template}}-node_k8s"
        #datastore:      "{{ env_name | lower }}"
        datastore:      "vvol_labs"
        networks:
        - name:         "Labs_{{ env_name }}"
          start_connected: yes
          connected: yes
      delegate_to:      localhost
      when: 
       - "'-node' in item.guest_name"
      loop: "{{ yaml_content.virtual_machines }}"

#### OTHER TASKS
    - name: Get vms from /{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}
      vmware_vm_info:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        folder:           "/{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}"
        validate_certs:   no
      delegate_to: localhost
      register: vcenter_folder_info

    - name: Power on all Env Machines 
      vmware_guest:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        validate_certs:   no
        uuid:             "{{ item.uuid }}"
        state:            poweredon
      delegate_to: localhost
      with_items: "{{ vcenter_folder_info.virtual_machines }}"

    - name: Stop {{ pause_seconds }} seconds until the start of VMs
      pause:
        seconds: "{{ pause_seconds }}"

##### CONFIGURE MACHINES
    - name: Change hostname of environment machines
      vmware_vm_shell:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        validate_certs:   no
        datacenter:       "{{ datacenter }}"
        folder:           "/{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}"
        vm_id:            "{{ item.guest_name }}"
        vm_username:      "{{ vm_user }}"
        vm_password:      "{{ vm_password }}"
        vm_shell:         "/usr/bin/hostnamectl"
        vm_shell_args:    "set-hostname {{ item.guest_name | regex_replace('.*-','') }}.{{ env_name | lower }}.labs.stratio.com --static"
      when: "('-hdfs' in item.guest_name and hdfs == true) or ('-kerberos' in item.guest_name and kerberos == true) or ('-kerberos' not in item.guest_name and '-hdfs' not in item.guest_name)"
      delegate_to:      localhost
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Configure interface - Add base config
      vmware_vm_shell:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        validate_certs:   no
        datacenter:       "{{ datacenter }}"
        folder:           "/{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}"
        vm_id:            "{{ item.guest_name }}"
        vm_username:      "{{ vm_user }}"
        vm_password:      "{{ vm_password }}"
        vm_shell:         "/bin/echo"
        vm_shell_args:    "\"TYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=none\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=no\nNAME=ens33\nDEVICE=ens33\nONBOOT=yes\nIPV6_PRIVACY=no\nDNS1={{ vm_dns }}\nPREFIX=24\nGATEWAY={{ item.ip_address.split('.')[0:3] | join('.') + '.1' }}\" > /etc/sysconfig/network-scripts/ifcfg-ens33"
      when: "('-hdfs' in item.guest_name and hdfs == true) or ('-kerberos' in item.guest_name and kerberos == true) or ('-kerberos' not in item.guest_name and '-hdfs' not in item.guest_name)"
      delegate_to:      localhost
      loop: "{{ yaml_content.virtual_machines }}"
      
    - name: Configure interface - Disable IPv6
      vmware_vm_shell:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        validate_certs:   no
        datacenter:       "{{ datacenter }}"
        folder:           "/{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}"
        vm_id:            "{{ item.guest_name }}"
        vm_username:      "{{ vm_user }}"
        vm_password:      "{{ vm_password }}"
        vm_shell:         "/bin/echo"
        vm_shell_args:    "\"net.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.default.disable_ipv6 = 1\" >> /etc/sysctl.conf"
      when: "('-hdfs' in item.guest_name and hdfs == true) or ('-kerberos' in item.guest_name and kerberos == true) or ('-kerberos' not in item.guest_name and '-hdfs' not in item.guest_name)"
      delegate_to:      localhost
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Configure interface - IP
      vmware_vm_shell:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        validate_certs:   no
        datacenter:       "{{ datacenter }}"
        folder:           "/{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}"
        vm_id:            "{{ item.guest_name }}"
        vm_username:      "{{ vm_user }}"
        vm_password:      "{{ vm_password }}"
        vm_shell:         "/bin/echo"
        vm_shell_args:    "\"IPADDR={{ item.ip_address }}\" >> /etc/sysconfig/network-scripts/ifcfg-ens33"
      when: "('-hdfs' in item.guest_name and hdfs == true) or ('-kerberos' in item.guest_name and kerberos == true) or ('-kerberos' not in item.guest_name and '-hdfs' not in item.guest_name)"
      delegate_to:      localhost
      loop: "{{ yaml_content.virtual_machines }}"

    - name: Restart Machine
      vmware_vm_shell:
        hostname:         "{{ vcenter_hostname }}"
        username:         "{{ vcenter_username }}"
        password:         "{{ vcenter_password }}"
        validate_certs:   no
        datacenter:       "{{ datacenter }}"
        folder:           "/{{ datacenter }}/vm/{{ parent_folder }}/{{ env_name }}"
        vm_id:            "{{ item.guest_name }}"
        vm_username:      "{{ vm_user }}"
        vm_password:      "{{ vm_password }}"
        vm_shell:         "/usr/bin/systemctl"
        vm_shell_args:    "reboot"
      when: "('-hdfs' in item.guest_name and hdfs == true) or ('-kerberos' in item.guest_name and kerberos == true) or ('-kerberos' not in item.guest_name and '-hdfs' not in item.guest_name)"
      delegate_to:      localhost
      loop: "{{ yaml_content.virtual_machines }}"